#!/usr/bin/env ruby

require 'oaktree'
require 'fileutils'

# Constants

APP_NAME = 'oak'

GEM_NAME = 'oaktree'

HELP_TEXT = <<EOH
#{APP_NAME} <command> ...

COMMANDS
* -n, newpost [title]
  Creates a new post.  If no title is given, the post's title is "Untitled".
  The new post is placed in the blog's source/ directory
  
* -i, init [dir]
  Creates a 'blog_spec' file and required directories in the given directory
  if blog_spec doesn't already exist.  If no directory is provided, oak uses
  the working directory.

* -s, sync
  Builds HTML files for changed posts.  This does not rebuild files following
  template changes.  If you've made changes to templates, you should use the
  rebuild command.

* -r, rebuild
  Builds HTML files for all posts, regardless of whether they've been changed.

* -v, version
  Shows the version of oak and the oaktree gem.

* -h, help
  Shows this help text.

EOH


# Commands

# Generate a new blog_spec and create 'source' and 'public' directories under
# the given directory.
def init_blog directory
  Dir.chdir(directory) { |path|
    if File.exists? 'blog_spec' then
      puts "blog_spec already exists in #{directory}"
      exit 1
    end
    
    IO.write 'blog_spec', OakTree::Specification.new.export_string
    Dir.mkdir 'source'
    Dir.mkdir 'public'
  }
end


# Show the version
def show_version
  version = OakTree::VERSION
  
  puts "#{GEM_NAME} version #{version}"
end


# Show the help text for oak
def show_help
  puts HELP_TEXT
  show_version
end


# Generate a new post file for the blog
def new_post spec, title
  title = title.gsub(/[\n\t]+/, '').strip
  
  today = DateTime.now
  
  titleslug = title.gsub(/[^_\w\s]/, '').strip.gsub(/\s+/, '_').downcase
  timeslug = today.strftime '%Y-%m-%d'
  
  file = "#{spec.blog_root}/source/#{timeslug}_#{titleslug}.md"
  
  head = <<HEADSTR
title: #{title}
time: #{today.strftime '%Y-%m-%d %H:%M:%S %z'}
----

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
HEADSTR
  
  IO.write file, head
end


def sync_changes spec, force
  raise "No blog_spec found" if spec.nil?
      
  blog = OakTree.new spec
  blog.generate force
end


# Command selector majigger
def dispatch_command cmd, *args
  
  spec = (File.exists? 'blog_spec') ? (OakTree::Specification.from_file 'blog_spec') : nil
  
  case cmd
    
    when 'newpost', '-n'
      raise "Not in a blog directory" unless File.exists? 'blog_spec'
    
      title = 'Untitled'
      title = args.join ' ' unless args.empty?
      new_post spec, title
      
    when 'init', '-i'
      directory = '.'
      directory = args[0] unless args.empty?
      init_blog directory
    
    when 'version', '-v'
      show_version
    
    when 'help', '-h'
      show_help
    
    when 'rebuild', '-r'
      sync_changes spec, true
    
    when 'sync', '-s'
      sync_changes spec, false
    
    else
      puts "Unrecognized command '#{cmd}'\n\n"
      
      show_help
  
  end
  
end


# Main logic

if ARGV.empty? then
  show_help
else
  dispatch_command ARGV[0], *ARGV[1..ARGV.length]
end
