class OakTree::Post
  @@METADATA_SEPARATOR = /^-{3,}\s*$/
  @@METADATA_ITEM = /^\s*(?<key>\w+)\s*:\s*(?<value>.*?)\s*$/
  
  attr_reader :source_path
  
  # The path to the public generated HTML file
  @public_path = nil
  # The path to the private source MD file
  @source_path = ''
  
  @title = nil
  @time = nil       # DateTime the post displays
  @slug = nil       # Post slug (generated by default, but can be specified)
  @link = nil       # A link the post leads to other than its own permalink
  
  @categories = []
  @tags = []
  
  @spec = nil
  @last_modified = nil
  
  # Optionally takes an OakTree::Specification object as the spec.
  def initialize path, spec = nil
    @source_path = path
    @spec = spec
    @last_modified = Time.at 0
    
    sync_changes true
  end
  
  def public_path
    sync_changes
    @public_path
  end
  
  def title
    sync_changes
    @title
  end
  
  def link
    sync_changes
    @link
  end
  
  def time
    sync_changes
    @time
  end
  
  def tags
    sync_changes
    @tags
  end
  
  def categories
    sync_changes
    @categories
  end
  
  def slug
    sync_changes
    
    @slug
  end
  
  def mtime
    @last_modified
  end
  
  private
  
  def sync_changes force = false
    raise "Source file '#{@source_path}' no longer exists" unless File.exists? @source_path
    
    modified_time = File.mtime @source_path
    
    if not force then
      if not @public_path.nil? and File.exists? @public_path then
        public_mtime = File.mtime @public_path
        return if modified_time <= public_mtime
      end
      
      return if modified_time <= @last_modified
    end
    
    source = IO.read @source_path
    @last_modified = modified_time
    
    @slug = nil
    @categories = []
    @tags = []
    @link = ''
    @title = nil
    @time = nil
    
    source.lines.each { |line|
      break if line =~ @@METADATA_SEPARATOR
      
      match = line.match @@METADATA_ITEM
      
      if match.nil? then
        puts "Unmatched line: '#{line}' in #{@source_path}"
        next
      end
      
      key = match[:key]
      value = match[:value]
      
      case key.to_sym
        when :title
          @title = value.freeze
          
        when :time
          @time = DateTime.parse(value).freeze
          
        when :link
          @link = value.freeze
          
        when :tags
          @tags = value.split(',').map { |item| item.strip.freeze } .freeze
          
        when :categories
          @categories = value.split(',').map { |item| item.strip.freeze } .freeze
          
        when :slug
          @slug = value.freeze
          
        else
          puts "Unrecognized metadata key '#{key}' in #{@source_path}"
      end
    }
    
    raise "No title provided in post '#{@source_path}'" if @title.nil?
    raise "No post time provided in post '#{@source_path}'" if @time.nil?
    
    if @slug.nil? then
      @slug = @title.gsub(/[\n\t]+/, '').strip.gsub(/[^_\w\s]/, '').strip.gsub(/\s+/, '_').downcase
    end
    
    @public_path = "public/#{@time.strftime '%Y/%m'}/#{@slug}.html"
    @public_path = "#{@spec.blog_root}/#{@public_path}" unless @spec.nil?
  end
end
